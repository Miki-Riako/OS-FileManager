from PySide6.QtCore import Qt, QSize, QUrl, QPoint, QProcess
from PySide6.QtGui import QKeySequence, QShortcut, QIcon, QDesktopServices, QColor, QFont, QSyntaxHighlighter, QTextCharFormat
from PySide6.QtWidgets import (
    QApplication, QLabel, QFrame, QMessageBox,
    QWidget, QVBoxLayout,  QHBoxLayout, QVBoxLayout,
    QStackedWidget
    )
from qfluentwidgets import (
    CaptionLabel, PlainTextEdit, PushButton, CheckBox, BodyLabel, SpinBox, ComboBox, qrouter,
    NavigationItemPosition, MessageBox, TabBar, SubtitleLabel, setFont, TabCloseButtonDisplayMode, IconWidget,
    TransparentDropDownToolButton, TransparentToolButton, setTheme, Theme, isDarkTheme,
    InfoBar, InfoBarPosition, InfoBarManager
    )
from qfluentwidgets import FluentIcon as FIF

from api.api import API

from .highlighter import Highlighter

class Workspace(QWidget):
    def __init__(self, text: str, parent=None):
        super().__init__(parent=parent)
        self.api = API(self, "app")

        self.vBoxLayout = QVBoxLayout(self)
        self.tabBoxLayout = QHBoxLayout(self)
        self.tabBar = TabBar(self)
        self.runButton = TransparentToolButton(FIF.PLAY.icon(color=QColor(206, 206, 206) if isDarkTheme() else QColor(96, 96, 96)), self)
        self.stackedWidget = QStackedWidget(self)
        self.terminal_text = PlainTextEdit(self)
        self.terminal_text.setPlaceholderText("Input your string here, then press Run (Ctrl+R)")

        self.__initWidget()
        self.runShortcut = QShortcut(QKeySequence("Ctrl+R"), self)
        self.runShortcut.activated.connect(self.run)
        self.runButton.clicked.connect(self.run)
        # self.setObjectName(text.replace(' ', '-'))

    def __initWidget(self):
        self.initLayout()
        self.addSubInterface(self.terminal_text, 'InputTab', self.tr('new'), FIF.COMMAND_PROMPT)
        qrouter.setDefaultRouteKey(self.stackedWidget, self.terminal_text.objectName())

    def initLayout(self):
        self.tabBar.setTabMaximumWidth(200)

        self.tabBoxLayout.addWidget(self.tabBar)
        self.tabBoxLayout.addWidget(self.runButton)
        self.vBoxLayout.addLayout(self.tabBoxLayout)
        self.vBoxLayout.addWidget(self.stackedWidget)
        self.vBoxLayout.setContentsMargins(5, 5, 5, 5)

    def addSubInterface(self, widget: PlainTextEdit, objectName, text, icon):
        widget.setObjectName(objectName)
        widget.setFont(QFont("Consolas", 20))
        self.highlighter = Highlighter(widget.document())
        self.stackedWidget.addWidget(widget)
        self.tabBar.addTab(
            routeKey=objectName,
            text=text,
            icon=icon,
            onClick=lambda: self.stackedWidget.setCurrentWidget(widget)
        )

    def warning(self, title, content):
        InfoBar.warning(
            title=title,
            content=content,
            orient=Qt.Horizontal,
            isClosable=True,
            position=InfoBarPosition.TOP,
            duration=2000,
            parent=self
        )

    def run(self):
        self.terminal_text.appendPlainText(self.api.api_io(self.terminal_text.toPlainText()))